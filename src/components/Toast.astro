---
// Toast notification component with auto-dismiss
---

<!-- Toast container (fixed position, top-right) -->
<div
  id="toast-container"
  class="fixed top-4 right-4 z-[9999] flex flex-col gap-3 pointer-events-none"
  aria-live="polite"
  aria-atomic="true"
>
  <!-- Toasts will be dynamically inserted here -->
</div>

<script>
  type ToastType = 'success' | 'error' | 'info';

  interface ToastOptions {
    message: string;
    type?: ToastType;
    duration?: number;
  }

  interface Toast {
    id: string;
    message: string;
    type: ToastType;
    duration: number;
    element: HTMLElement;
  }

  class ToastManager {
    private container: HTMLElement | null;
    private toasts: Toast[] = [];
    private maxToasts = 3;

    constructor() {
      this.container = document.getElementById('toast-container');
      if (!this.container) {
        console.warn('Toast container not found');
      }
    }

    show(options: ToastOptions) {
      if (!this.container) return;

      const toast: Toast = {
        id: `toast-${Date.now()}-${Math.random()}`,
        message: options.message,
        type: options.type || 'info',
        duration: options.duration || 5000,
        element: this.createToastElement(
          options.message,
          options.type || 'info',
          options.duration || 5000
        ),
      };

      // Remove oldest toast if we've hit the limit
      if (this.toasts.length >= this.maxToasts && this.toasts[0]) {
        this.dismiss(this.toasts[0].id);
      }

      this.toasts.push(toast);
      this.container.appendChild(toast.element);

      // Trigger animation
      requestAnimationFrame(() => {
        toast.element.classList.add('toast-show');
      });

      // Auto-dismiss
      if (toast.duration > 0) {
        setTimeout(() => {
          this.dismiss(toast.id);
        }, toast.duration);
      }
    }

    private createToastElement(message: string, type: ToastType, duration: number): HTMLElement {
      const toast = document.createElement('div');
      toast.className = `toast toast-${type} pointer-events-auto`;

      const colors = {
        success:
          'bg-green-50 dark:bg-green-900/30 text-green-800 dark:text-green-200 border-green-200 dark:border-green-800',
        error:
          'bg-red-50 dark:bg-red-900/30 text-red-800 dark:text-red-200 border-red-200 dark:border-red-800',
        info: 'bg-blue-50 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 border-blue-200 dark:border-blue-800',
      };

      const icons = {
        success:
          '<svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>',
        error:
          '<svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/></svg>',
        info: '<svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/></svg>',
      };

      toast.innerHTML = `
        <div class="flex items-start gap-3 p-4 rounded-xl border backdrop-blur-xl shadow-lg ${colors[type]} relative overflow-hidden">
          ${icons[type]}
          <p class="flex-grow text-sm font-medium">${message}</p>
          <button class="toast-close flex-shrink-0 opacity-50 hover:opacity-100 transition-opacity" aria-label="Close">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
          </button>
          ${duration > 0 ? `<div class="toast-progress absolute bottom-0 left-0 h-1 bg-current opacity-30" style="animation: progress ${duration}ms linear forwards;"></div>` : ''}
        </div>
      `;

      // Add close button event
      const closeBtn = toast.querySelector('.toast-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          const toastId = this.toasts.find((t) => t.element === toast)?.id;
          if (toastId) this.dismiss(toastId);
        });
      }

      return toast;
    }

    dismiss(id: string) {
      const index = this.toasts.findIndex((t) => t.id === id);
      if (index === -1) return;

      const toast = this.toasts[index];
      if (!toast) return;

      toast.element.classList.remove('toast-show');
      toast.element.classList.add('toast-hide');

      setTimeout(() => {
        toast.element.remove();
        this.toasts.splice(index, 1);
      }, 300);
    }

    dismissAll() {
      this.toasts.forEach((toast) => {
        this.dismiss(toast.id);
      });
    }
  }

  // Create global toast manager
  const toastManager = new ToastManager();

  // Expose to window for easy access
  (window as any).showToast = (options: ToastOptions) => toastManager.show(options);
  (window as any).dismissAllToasts = () => toastManager.dismissAll();
</script>

<style>
  .toast {
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease-out;
  }

  .toast-show {
    opacity: 1;
    transform: translateX(0);
  }

  .toast-hide {
    opacity: 0;
    transform: translateX(100%);
  }

  @keyframes progress {
    from {
      width: 100%;
    }
    to {
      width: 0%;
    }
  }

  /* Respect reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    .toast {
      transition: opacity 0.3s ease-out;
      transform: none;
    }

    .toast-show {
      transform: none;
    }

    .toast-hide {
      transform: none;
    }
  }
</style>
