---
import { Icon } from 'astro-icon/components';
---

<section id="contact" class="py-20 bg-transparent relative">
  <!-- Decorative background elements -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div
      class="absolute top-20 left-1/2 -translate-x-1/2 w-96 h-96 bg-blue-300/20 dark:bg-blue-500/10 rounded-full blur-3xl"
    >
    </div>
  </div>

  <div class="container relative z-10">
    <h2 class="fade-in text-4xl text-center mb-4">Get In Touch</h2>
    <p class="fade-in text-center text-gray-600 dark:text-gray-400 text-lg mb-12">
      I'm always open to new opportunities and collaborations. Feel free to reach out!
    </p>
    <div class="grid md:grid-cols-2 gap-16 max-w-5xl mx-auto">
      <div class="flex flex-col gap-8 fade-in">
        <div class="flex gap-4 items-start">
          <Icon name="heroicons:envelope-20-solid" class="text-primary flex-shrink-0 w-6 h-6" />
          <div>
            <h4 class="text-base mb-1">Email</h4>
            <a
              href="mailto:christulsi@gmail.com"
              class="text-gray-600 dark:text-gray-400 hover:text-primary transition-colors"
              >christulsi@gmail.com</a
            >
          </div>
        </div>
        <div class="flex gap-4 items-start">
          <Icon
            name="heroicons:code-bracket-square-20-solid"
            class="text-primary flex-shrink-0 w-6 h-6"
          />
          <div>
            <h4 class="text-base mb-1">GitHub</h4>
            <a
              href="https://github.com/christulsi"
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-600 dark:text-gray-400 hover:text-primary transition-colors"
              >@christulsi</a
            >
          </div>
        </div>
        <div class="flex gap-4 items-start">
          <Icon name="heroicons:user-group-20-solid" class="text-primary flex-shrink-0 w-6 h-6" />
          <div>
            <h4 class="text-base mb-1">LinkedIn</h4>
            <a
              href="https://linkedin.com/in/christulsi"
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-600 dark:text-gray-400 hover:text-primary transition-colors"
              >linkedin.com/in/christulsi</a
            >
          </div>
        </div>
      </div>
      <form
        id="contact-form"
        class="relative bg-white/60 dark:bg-gray-800/40 backdrop-blur-xl p-8 rounded-3xl border border-white/20 dark:border-gray-700/50 shadow-2xl fade-in overflow-hidden"
      >
        <!-- Gradient accent top bar -->
        <div
          class="absolute top-0 left-0 right-0 h-1.5 bg-gradient-to-r from-primary via-purple-500 to-secondary rounded-t-3xl"
        >
        </div>

        <div class="mb-6 relative">
          <label for="name" class="block mb-2 font-semibold text-gray-800 dark:text-gray-200"
            >Name</label
          >
          <input
            type="text"
            id="name"
            name="name"
            required
            minlength="2"
            class="w-full px-4 py-3 border border-gray-200/50 dark:border-gray-600/50 rounded-xl bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm text-gray-900 dark:text-gray-50 transition-all focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 focus:bg-white dark:focus:bg-gray-900"
          />
          <div class="field-icon hidden" id="name-icon"></div>
          <p class="text-xs text-red-600 dark:text-red-400 mt-1 hidden" id="name-error">
            Name must be at least 2 characters
          </p>
        </div>
        <div class="mb-6 relative">
          <label for="email" class="block mb-2 font-semibold text-gray-800 dark:text-gray-200"
            >Email</label
          >
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-3 border border-gray-200/50 dark:border-gray-600/50 rounded-xl bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm text-gray-900 dark:text-gray-50 transition-all focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 focus:bg-white dark:focus:bg-gray-900"
          />
          <div class="field-icon hidden" id="email-icon"></div>
          <p class="text-xs text-red-600 dark:text-red-400 mt-1 hidden" id="email-error">
            Please enter a valid email address
          </p>
        </div>
        <div class="mb-6 relative">
          <label for="message" class="block mb-2 font-semibold text-gray-800 dark:text-gray-200"
            >Message</label
          >
          <textarea
            id="message"
            name="message"
            rows="5"
            required
            minlength="10"
            maxlength="500"
            class="w-full px-4 py-3 border border-gray-200/50 dark:border-gray-600/50 rounded-xl bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm text-gray-900 dark:text-gray-50 transition-all resize-y focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 focus:bg-white dark:focus:bg-gray-900"
          ></textarea>
          <p class="text-xs text-gray-600 dark:text-gray-400 mt-1 text-right">
            <span id="char-count">0</span>/500
          </p>
          <p class="text-xs text-red-600 dark:text-red-400 mt-1 hidden" id="message-error">
            Message must be at least 10 characters
          </p>
        </div>
        <button
          type="submit"
          id="submit-btn"
          class="w-full px-8 py-4 bg-gradient-to-r from-primary to-secondary text-white rounded-xl font-bold transition-all hover:shadow-xl hover:shadow-primary/30 hover:-translate-y-1 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:translate-y-0 disabled:hover:shadow-none btn-enhanced"
        >
          <span id="submit-text">Send Message</span>
          <span id="submit-loading" class="hidden">Sending...</span>
        </button>
      </form>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text') as HTMLSpanElement;
  const submitLoading = document.getElementById('submit-loading') as HTMLSpanElement;

  const nameInput = document.getElementById('name') as HTMLInputElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const messageInput = document.getElementById('message') as HTMLTextAreaElement;

  const nameError = document.getElementById('name-error') as HTMLParagraphElement;
  const emailError = document.getElementById('email-error') as HTMLParagraphElement;
  const messageError = document.getElementById('message-error') as HTMLParagraphElement;

  const nameIcon = document.getElementById('name-icon') as HTMLDivElement;
  const emailIcon = document.getElementById('email-icon') as HTMLDivElement;

  const charCount = document.getElementById('char-count') as HTMLSpanElement;

  // Character counter for message
  messageInput?.addEventListener('input', () => {
    charCount.textContent = messageInput.value.length.toString();
  });

  // Validation icons
  const checkIcon =
    '<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>';
  const errorIcon =
    '<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/></svg>';

  // Validation functions
  function validateName() {
    const isValid = nameInput.value.trim().length >= 2;
    if (nameInput.value.length > 0) {
      if (isValid) {
        nameInput.classList.remove('field-invalid');
        nameInput.classList.add('field-valid');
        nameIcon.innerHTML = checkIcon;
        nameIcon.classList.remove('hidden');
        nameError.classList.add('hidden');
      } else {
        nameInput.classList.remove('field-valid');
        nameInput.classList.add('field-invalid');
        nameIcon.innerHTML = errorIcon;
        nameIcon.classList.remove('hidden');
        nameError.classList.remove('hidden');
      }
    }
    return isValid;
  }

  function validateEmail() {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const isValid = emailRegex.test(emailInput.value);
    if (emailInput.value.length > 0) {
      if (isValid) {
        emailInput.classList.remove('field-invalid');
        emailInput.classList.add('field-valid');
        emailIcon.innerHTML = checkIcon;
        emailIcon.classList.remove('hidden');
        emailError.classList.add('hidden');
      } else {
        emailInput.classList.remove('field-valid');
        emailInput.classList.add('field-invalid');
        emailIcon.innerHTML = errorIcon;
        emailIcon.classList.remove('hidden');
        emailError.classList.remove('hidden');
      }
    }
    return isValid;
  }

  function validateMessage() {
    const isValid = messageInput.value.trim().length >= 10;
    if (messageInput.value.length > 0) {
      if (isValid) {
        messageInput.classList.remove('field-invalid');
        messageInput.classList.add('field-valid');
        messageError.classList.add('hidden');
      } else {
        messageInput.classList.remove('field-valid');
        messageInput.classList.add('field-invalid');
        messageError.classList.remove('hidden');
      }
    }
    return isValid;
  }

  // Add validation on blur (after first interaction)
  nameInput?.addEventListener('blur', validateName);
  emailInput?.addEventListener('blur', validateEmail);
  messageInput?.addEventListener('blur', validateMessage);

  // Add real-time validation on input (after first blur)
  let nameBlurred = false;
  let emailBlurred = false;
  let messageBlurred = false;

  nameInput?.addEventListener('blur', () => {
    nameBlurred = true;
  });
  emailInput?.addEventListener('blur', () => {
    emailBlurred = true;
  });
  messageInput?.addEventListener('blur', () => {
    messageBlurred = true;
  });

  nameInput?.addEventListener('input', () => {
    if (nameBlurred) validateName();
  });
  emailInput?.addEventListener('input', () => {
    if (emailBlurred) validateEmail();
  });
  messageInput?.addEventListener('input', () => {
    if (messageBlurred) validateMessage();
  });

  // Ripple effect on submit button
  submitBtn?.addEventListener('click', function (this: HTMLElement) {
    if (!submitBtn.disabled) {
      this.classList.add('ripple');
      setTimeout(() => {
        this.classList.remove('ripple');
      }, 600);
    }
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate all fields
    const nameValid = validateName();
    const emailValid = validateEmail();
    const messageValid = validateMessage();

    if (!nameValid || !emailValid || !messageValid) {
      (window as any).showToast({
        message: 'Please fix the errors in the form',
        type: 'error',
        duration: 5000,
      });
      return;
    }

    // Show loading state
    submitBtn.disabled = true;
    submitText.classList.add('hidden');
    submitLoading.classList.remove('hidden');

    const formData = new FormData(form);

    try {
      // Using FormSubmit.co - free, no signup required
      const response = await fetch('https://formsubmit.co/christulsi@gmail.com', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
          name: formData.get('name'),
          email: formData.get('email'),
          message: formData.get('message'),
          _subject: `Portfolio Contact from ${formData.get('name')}`,
          _captcha: 'false',
        }),
      });

      if (response.ok) {
        // Success toast
        (window as any).showToast({
          message: 'Thank you! Your message has been sent successfully.',
          type: 'success',
          duration: 5000,
        });
        form.reset();
        // Reset validation states
        nameInput.classList.remove('field-valid', 'field-invalid');
        emailInput.classList.remove('field-valid', 'field-invalid');
        messageInput.classList.remove('field-valid', 'field-invalid');
        nameIcon.classList.add('hidden');
        emailIcon.classList.add('hidden');
        charCount.textContent = '0';
      } else {
        throw new Error('Form submission failed');
      }
    } catch (error) {
      // Error toast
      (window as any).showToast({
        message: 'Oops! Something went wrong. Please try again or email me directly.',
        type: 'error',
        duration: 5000,
      });
    } finally {
      // Reset button state
      submitBtn.disabled = false;
      submitText.classList.remove('hidden');
      submitLoading.classList.add('hidden');
    }
  });
</script>
